# nael math module
# Copyright 2010 Dominik Picheta, Alex Mitchell, Vijay Vanness

# Constants
func pi [] (3.14159265);
func e [] (2.71828183);

# Tuples
point [x,y] tuple
ratio [numberator,denominator] tuple

# Function

func picks-basic [area perimeter] (
  #Allows you to calculate the area of a polygon in square units : see http://en.wikipedia.org/wiki/Pick's_theorem
    (area get 
      (perimeter get 2 /) 
     call +) 
   call 1 -
);

func circum [r] (
  # Calculates the circumference of r
  r get >float 2.0 *, pi *
);
  
func fib [n] (
  first let, first 0 =
  second let, second 1 =
  t let, t 0 =
  (n get 1 >)
  (t first get second get + =, first second get =, second t get =, n n get 1 - =)
  while
  second get
);

func isEven? [n] (n get 2 % 0 ==);

func collatz [c] (
  (c get isEven?) 
  (c get 2 /) 
  (c get 3 * 1 +) if
);

func midpoint [x1 y1 x2 y2] (
  ar let, ar [] =
  ar get
  x1 get >float, x2 get >float + 2.0 / append
  ar get y1 get >float y2 get >float + 2.0 / append
  del
);

func distance [x1 y1 x2 y2] (
  (
  ((x2 get >float x1 get >float -) call >float 2.0 pow) call 
  ((y2 get >int y1 get >int -) call >float 2.0 pow) call 
  +) call >float sqrt
);

func heaviside [n] (
  (n get 0 >)
  (1)
  ((n get 0 ==) (0.5) (0) if) if
);

func absolute [n] (
  n get >float n get >float * sqrt
);

func >float [n] (("int" n get type ==) (n get int>float) (("float" n get type ==) (n get) ("Incompatible type") if) if);
func >int [n] (("float" n get type ==) (n get float>int) (("int" n get type ==) (n get) ("Incompatible type") if) if);

func max [n] (
  n get 0.5 (n get 0.0 >=) (+) (-) if float>int
);

func slope-intercept-recurs [a b x1] ( #The same as the one below, except, this except x1 to be a [] list of numbers.
  (x1 get 
  (b get *) 
  each) 
  call a get +
);

func slope-intercept [a b x] ( 
  (x get 
  b get 
  *) 
  call a get +
);
#to some people, know as the opposite-reciprocal.
func reciprocal [point] (
  final let, 
  final [] =, 
  final get 0 point get 1 nth - append, 
  point get 0 nth append
);
