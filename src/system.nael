func while2 [cond, do] ((cond get call) (do get call cond get do get while2) () if);
func times [do, i] (count let, count 0 =, (count get, i get, <) (do get call, count count get 1 + =) while );
func dup [] (__stack__ len 1 -, __stack__ swap nth);
func clear [] ((del) __stack__ len 1 - times);
func dip [value, quo] (quo get call value get);

func inc [i] (i i get 1 + =, i get);

func <= [first, second] (first get second get == first get second get < or);
func >= [x,y] (y get x get <=);

func each [list, quo] 
  ( 
    i let, i 0 = # Set i  to 0
    ( 
      # Check if the length of list is bigger than i
      # If not end the loop
      i get 
      list get len 1 - <
    )
    (
      list get, i get nth # Get the i-th item of list
      quo get call # Call the quotation in the quo variable
      i i get inc = # Increase i by 1
    ) while
  );

func fold [list, beg, quo]
  (
    i let, i 0 =
    beg2 let, beg2 beg get =
    (
      i get
      list get len <
    )
    (
      beg2 get
      list get, i get nth
      quo get call
      beg2 swap =
      
      i i get inc =
    ) while
    beg2 get
  );

func join [list, seperator] (i let, i 0 =, s let, s "" =, (i get, list get len 1 - <) (s get (i get 0 == !) (seperator get +) () if, list get, i get nth, + s swap =, i i get inc =) while, s get);

